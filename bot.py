import asyncio
import logging
import os
import time
import re

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
import pandas as pd
import pandas_ta as ta
import aiohttp

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å —Ç–∏–∫–µ—Ä–∞–º–∏
symbol_aliases = {
    "bitcoin": "BTC",
    "ethereum": "ETH",
    "solana": "SOL",
    "dogecoin": "DOGE",
    "ripple": "XRP",
    "binancecoin": "BNB",
    "cardano": "ADA",
    "tron": "TRX",
    "polkadot": "DOT",
    "litecoin": "LTC",
    "avalanche": "AVAX",
    "shiba": "SHIB",
    "pepe": "PEPE",
    "toncoin": "TON",
    "injective": "INJ"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ Start")],
        [KeyboardButton(text="üìâ –°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ"), KeyboardButton(text="üíé –¢–û–ü –º–æ–Ω–µ—Ç—ã")],
        [KeyboardButton(text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫"), KeyboardButton(text="‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫")],
        [KeyboardButton(text="‚ùì Help")]
    ],
    resize_keyboard=True
)


# –ö—ç—à —Å–∏–≥–Ω–∞–ª–æ–≤
signal_cache = {}

#Start –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –≤ –º–µ–Ω—é
@dp.message(F.text.lower() == "üöÄ start")
async def start_button(message: Message):
    await start(message)

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Crypto Signal AI Bot.\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ –ø–æ RSI, EMA –∏ MACD üìä\n"
        "–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª—ã —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 60%.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, MATIC...)\n\n"
        "–ë–æ—Ç —Ç–∞–∫–∂–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ –≥—Ä—É–ø–ø—É ‚úÖ",
        reply_markup=main_kb
    )

# –ó–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ä–∞
@dp.message(F.text.lower() == "üìâ —Å–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ")
async def ask_symbol(message: Message):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL...)")

# –¢–û–ü –º–æ–Ω–µ—Ç—ã
@dp.message(F.text.lower() == "üíé —Ç–æ–ø –º–æ–Ω–µ—Ç—ã")
async def show_top_coins(message: Message):
    top_list = "\n".join([f"‚Ä¢ {v}" for v in symbol_aliases.values()])
    await message.answer(f"üî• –¢–û–ü –º–æ–Ω–µ—Ç—ã:\n{top_list}\n\n–í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö!")

# –§–æ—Ä—Å —Å–∫–∞–Ω —Ä—ã–Ω–∫–∞
@dp.message(F.text.lower() == "‚ôªÔ∏è –æ–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫")
async def force_scan(message: Message):
    await message.answer("‚è≥ –§–æ—Ä—Å–∏—Ä—É—é —Å–∫–∞–Ω —Ä—ã–Ω–∫–∞...")
    symbols = await get_all_usdt_symbols()
    results = await analyze_many(symbols)
    if results:
        for text in results:
            await message.answer(text)
    else:
        await message.answer("‚ùå –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –°–∫–∞–Ω –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞
@dp.message(F.text.lower() == "üîç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫")
async def scan_market(message: Message):
    await message.answer("‚è≥ –°–∫–∞–Ω–∏—Ä—É—é –≤–µ—Å—å —Ä—ã–Ω–æ–∫ USDT –º–æ–Ω–µ—Ç...")
    symbols = await get_all_usdt_symbols()
    results = await analyze_many(symbols)
    if results:
        for text in results:
            await message.answer(text)
    else:
        await message.answer("‚ùå –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# HELP
@dp.message(F.text.lower() == "‚ùì help")
async def help_message(message: Message):
    await message.answer(
        "‚ÑπÔ∏è Crypto Signal AI Bot ‚Äî —ç—Ç–æ Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "üî∏ üìâ –°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ ‚Äî –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL).\n"
        "üî∏ üíé –¢–û–ü –º–æ–Ω–µ—Ç—ã ‚Äî –ë—ã—Å—Ç—Ä–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç.\n"
        "üî∏ üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ ‚Äî –ü–æ–ª–Ω—ã–π —Å–∫–∞–Ω —Ä—ã–Ω–∫–∞ (–≤—Å–µ –ø–∞—Ä—ã USDT).\n"
        "üî∏ ‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ–∫ ‚Äî –§–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
        "üîÅ –ê–≤—Ç–æ-—Å–∫–∞–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ –≥—Ä—É–ø–ø—É.\n"
    )

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–∏–∫–µ—Ä –≤—Ä—É—á–Ω—É—é
@dp.message(F.text.regexp(r"^[A-Za-z]{2,15}$"))
async def single_signal(message: Message):
    user_input = message.text.lower().replace(" ", "")
    base = symbol_aliases.get(user_input, user_input).upper()
    symbol = base if base.endswith("USDT") else base + "USDT"
    text = await get_signal_text(symbol)
    await message.answer(text or f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {symbol}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä —Å USDT
async def get_all_usdt_symbols():
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.binance.com/api/v3/ticker/24hr") as resp:
            data = await resp.json()
            return [
                d['symbol'] for d in data
                if d['symbol'].endswith('USDT') and not re.search(r"(BUSD|TUSD|USDC|DAI|EUR|GBP|TRY|FDUSD|USDP)", d['symbol'])
            ]

# –°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ (—Å –∫—ç—à–µ–º)
async def get_signal_text(symbol):
    now = time.time()
    if symbol in signal_cache:
        ts, text = signal_cache[symbol]
        if now - ts < 300:  # –∫—ç—à 5 –º–∏–Ω—É—Ç
            return text

    klines = await get_klines(symbol)
    if klines:
        text = analyze_klines(symbol, klines)
        signal_cache[symbol] = (now, text)
        return text
    return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π
async def get_klines(symbol):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval=1m&limit=50"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                return data if isinstance(data, list) else None
    except:
        return None

# –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–Ω–µ—Ç
async def analyze_many(symbols):
    results = []
    sem = asyncio.Semaphore(10)

    async def limited_analyze(sym):
        async with sem:
            text = await get_signal_text(sym)
            if text and "Confidence" in text:
                conf_line = [line for line in text.splitlines() if "Confidence" in line]
                if conf_line and int(conf_line[0].split(": ")[1].replace('%', '')) >= 60:
                    results.append(text)

    tasks = [limited_analyze(s) for s in symbols]
    await asyncio.gather(*tasks)
    return results

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
def analyze_klines(symbol, klines):
    df = pd.DataFrame(klines, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'qav', 'num_trades', 'taker_base_vol',
        'taker_quote_vol', 'ignore'
    ])
    df['close'] = df['close'].astype(float)
    df['RSI'] = ta.rsi(df['close'], length=14)
    df['EMA'] = ta.ema(df['close'], length=21)
    macd = ta.macd(df['close'])
    df['MACD'] = macd.iloc[:, 0]
    df['MACD_signal'] = macd.iloc[:, 1]

    last_rsi = df['RSI'].iloc[-1]
    last_close = df['close'].iloc[-1]
    last_ema = df['EMA'].iloc[-1]
    last_macd = df['MACD'].iloc[-1]
    last_macd_signal = df['MACD_signal'].iloc[-1]

    signal = "HOLD"
    confidence = 50

    if last_rsi < 35 and last_close > last_ema and last_macd > last_macd_signal:
        signal = "BUY"
        confidence = 70
    elif last_rsi > 70 and last_close < last_ema and last_macd < last_macd_signal:
        signal = "SELL"
        confidence = 70

    tp = last_close * 1.01
    sl = last_close * 0.995

    return (
        f"üìà Pair: {symbol}\n"
        f"üìä RSI: {last_rsi:.2f}\n"
        f"üîπ EMA: {last_ema:.2f}\n"
        f"üí∞ Close: {last_close:.2f}\n"
        f"üîó MACD: {last_macd:.4f}\n"
        f"üîó MACD Signal: {last_macd_signal:.4f}\n\n"
        f"‚úÖ Signal: {signal}\n"
        f"üéØ Confidence: {confidence}%\n"
        f"üéØ Take Profit: {tp:.2f}\n"
        f"üö© Stop Loss: {sl:.2f}"
    )

# –ê–≤—Ç–æ-—Å–∫–∞–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def auto_send_signals():
    while GROUP_CHAT_ID != 0:
        symbols = await get_all_usdt_symbols()
        results = await analyze_many(symbols)
        if results:
            for text in results:
                await bot.send_message(chat_id=GROUP_CHAT_ID, text=text)
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫
async def main():
    asyncio.create_task(auto_send_signals())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
